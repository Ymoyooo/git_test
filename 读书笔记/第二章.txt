向HTML页面中插入JavaScript 的主要方法，就是使用<script>元素。


HTML4.01为<script>定义了下列 6 个属性：

? async：可选。表示应该立即下载脚本，但不应妨碍页面中的其他操作，比如下载其他资源或
等待加载其他脚本。只对外部脚本文件有效。
? charset：可选。表示通过 src 属性指定的代码的字符集。由于大多数浏览器会忽略它的值，
因此这个属性很少有人用。
? defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有
效。 IE7 及更早版本对嵌入脚本也支持这个属性。
? language：已废弃。原来用于表示编写代码使用的脚本语言（如 JavaScript、JavaScript1.2
或 VBScript）。大多数浏览器会忽略这个属性，因此也没有必要再用了。
? src：可选。表示包含要执行代码的外部文件。
? type：可选。可以看成是 language 的替代属性；表示编写代码使用的脚本语言的内容类型（也
称为 MIME 类型）。text的默认属性是text/javascript。

使用<script>元素的方式有两种：直接在页面中嵌入 JavaScript 代码和包含外部 JavaScript

文件。在使用<script>元素嵌入 JavaScript 代码时，只须为<script>指定 type 属性。把 JavaScript 代码直接放在元素内部即可

在解释器对<script>元素内部的所有代码求值完毕之前，页面中的其余内容都不会被浏览器加载或显示。

如果要通过<script>元素来包含外部 JavaScript 文件，那么 src 属性就是必需的。这个属性的值是一个指向外部 JavaScript 文件的链接，例如：
                    <script type="text/javascript" src="example.js"></script>

与解析嵌入式 JavaScript 代码一样，在解析外部 JavaScript 文件（包括下载该文件）时，页面的处理也会暂时停止。

XHTML文档中可以省略掉</script>标签。（并不符合HTML的规范）

外部的JS文件带有.js拓展名，这个不是必须的，因为浏览器不会检查这个拓展名。

需要注意的是，带有 src 属性的<script>元素不应该在其<script>和</script>标签之间再包含额外的 JavaScript 代码。如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码会被忽略。

通过<script>元素的 src 属性还可以包含来自外部域的 JavaScript 文件。这与<img>元素非常相似。
eg：<script type="text/javascript" src="http://www.somewhere.com/afile.js"></script>;
这样的话这个外部域钟的代码会被加载和解析。

由于上面提到的，HTML的内容是在JS的解析完才会显示的，所以说为了防止js解析完之前页面过于空白，我们可以把
js放在body中靠后的位置。

延迟脚本：
defer属性。defer="defer"（HTML5中仅适用与外部脚本文件。）这一个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在<script>元素中设置defer 属性，相当于告诉浏览器立即下载，但延迟执行。
即使我们把<script>元素放在了文档的<head>元素中，但其中包含的脚本将延迟到浏览器遇到</html>标签后再执行。

HTML5规范要求脚本按照他们出现的先后顺序执行。

延迟脚本不一定会按照顺序执行。因此最好只包括一个延迟脚本！

异步脚本。
HTML5为<script>元素定义了async属性。与defer类似，勇于改变处理脚本的行为。只适用于外部脚本文件。与defer不同的是标记为async的脚本不保证按照指定他们的先后顺序执行。

因此需要确保有async属性的脚本之间互不依赖！建议一部脚本不要再加载期间修改DOM。

异步脚本一定会在页面的load时间前执行。

XHTML中用法：略。

不支持JavaScript的浏览器会把<scripte>元素的内容直接输出到页面中。
故而以前会把js放在HTML注释里面。<!-- -->
现在已经全部支持了。没这个顾虑。

使用外部js文件有以下三个优点
? 可维护性：遍及不同 HTML 页面的 JavaScript 会造成维护问题。但把所有 JavaScript 文件都放在
一个文件夹中，维护起来就轻松多了。而且开发人员因此也能够在不触及 HTML 标记的情况下，
集中精力编辑 JavaScript 代码。
? 可缓存：浏览器能够根据具体的设置缓存链接的所有外部 JavaScript 文件。也就是说，如果有两个
页面都使用同一个文件，那么这个文件只需下载一次。因此，最终结果就是能够加快页面加载的
速度。
? 适应未来：通过外部文件来包含 JavaScript 无须使用前面提到 XHTML 或注释 hack。 HTML 和
XHTML 包含外部文件的语法是相同的。

<noscript>
对于不支持js的浏览器要让页面平稳的退化。用以在不支持 JavaScript 的浏览器中显示替代的内容。
这个元素可以包含能够出现在文档<body>中的任何 HTML 元素――<script>元素除外。包含在<noscript>元素中的内容只有在下列情况下才会显示出来：
    ? 浏览器不支持脚本；
    ? 浏览器支持脚本，但脚本被禁用。
符合上述任何一个条件，浏览器都会显示<noscript>中的内容。而在除此之外的其他情况下，浏览器不会呈现<noscript>中的内容。

ECMAScript大量借鉴C java Perl的语法。

