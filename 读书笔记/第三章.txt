区分大小写。变量名TEST和变量名test是两个不同的变量。函数名不可以使用关键字。

ECMAScirpt采用驼峰大小写格式

ECMAScript采用的是C风格的注释 包括单行和块级。

严格模式：严格模式吧ECMAScirpt3中的一些不确定的行为进行处理。对某些不安全的操作抛出错误

要在整个脚本中启用严格模式 在顶部添加代码  "use strict";

可以使用C风格的语法吧多条语句组合到一个代码块中。即使用{}括起来。

变量：
ECMAScipt的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。
书中称每个变量仅仅是一个用于保存值的占位符。
未定义的时候值为undefined
可以在修改变量值的同时修改值得类型。
定义的都是局部变量。
省略掉var的话就建立的就是一个全局变量。（严格模式会抛出错误）
可以使用一条语句定义多个变量，变量之间只要使用逗号隔开就好。

数据类型：
ECMAScript 中有 5 种简单数据类型（也称为基本数据类型）：Undefined、Null、Boolean、Number和 String。
一种复杂数据类型：object

检测变量的数据类型 typeof。这是个操作符，可以直接typeof 变量;也可以typeof(变量);

对于尚未声明的变量，只能执行一项操作。即使用typeof操作符检测其数据类型。会返回undefined。

Null类型是第二个只有一个值的数据类型。第一个是undefined。

null值表示的是一个空对象指针。typeof null 会返回object。

如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null 而不是其他值。这样一来，只要直接检查 null 值就可以知道相应的变量是否已经保存了一个对象的引用

只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存 null 值。

Boolean类型有有两个字面值：true或false。True和False都不是Boolean值。

可以用转型函数Boolean()把一个值转成对应的Boolean值。

非空字符串、任何非零数字、任何对象、对应的是true

空字符串、0/NaN、null、undefined对应的是false

Number类型：
                       十进制数字正常输入即可。八进制前面加0。十六进制前面加0x。
javascript中有正零和负零的区别。但被认为相等。

ECMAScript会把小数点后带有六个零以上的浮点数转化成e表示法表示的数值。

浮点数的最高精度是17位小数，但在进行算数计算时精度不如整数。

大多数浏览器的数值范围是5e-324~1.7976931348623157e+308

如果超过了范围，那么值将变成正无穷或负无穷。

可以使用一个isFinite()函数来判断数值是否在正常范围内。（返回true/false

NaN(Not a Number):
                                这个数值表示一个本要返回数值的操作数没返回数值的请情况

但实际上只有 0 除以 0 才会返回 NaN，正数除以 0 返回 Infinity，负数除以 0 返回-Infinity。

任何设计NaN操作（例如 NaN/10）都会返回 NaN。

NaN与任何值都不相等（包括自身）

可以通过isNaN（）函数来判断这个参数是否不是数值。
不能被转换成数值的值会返回ture（Boolean ture可以转换成1

有三个函数可以把非数值转换为数值： Number()、 parseInt()和 parseFloat()。

Number()可以适用于任何数据类型。另外两个函数专门把字符串转化成数值。

Number()函数的转换规则如下。
? 如果是 Boolean 值， true 和 false 将分别被转换为 1 和 0。
? 如果是数字值，只是简单的传入和返回。
? 如果是 null 值，返回 0。
? 如果是 undefined，返回 NaN。

字符串的话"123"返回123，"0123"返回123，十六进制返回十进制的值。
浮点数格式就返回对应的浮点数值。
空串返回0.
如果字符串包含别的字符那就返回NaN（空格符号那些）

对于对象 isNaN和Number()函数都会先用valueof()，如果转化结果是NaN再调用toString()。
-
Number函数在转化字符串时比较复杂而且不够合理。故而更常用parseInt().

parseInt在对字符串操作时。会忽略前面的空格，然后看第一个非空格字符是不是数字字符或者负号，如果不是那就返回NaN。所以空字符会编程NaN，而在Number会返回0；
"123blue"会变成"123"遇到非数字字符就会直接结束扫描了。
parseInt可以识别出八进制十六进制，并转换成十进制输出。

直接用parseint("串","转换基数") 如：parseInt("AF","16");按照十六进制转换。

parseFloat()与parseInt()类似。区别就是第一个小数点有用。
"22.34.25"会转换成'22.34'
parseFloat只解析十进制。别的进制要么返回0要么省略掉0；

String可以使用双引号或这单引号。完全相同。

输出一个单引号或者双引号 在前面加个反斜杠 \'   \"    \n

上面那种\n的转义字符表示一个字符。

任何字符串的长度可以通过访问其length属性来得到。

字符串间的链接可以直接用+号。

var age =11; var ageAsString=age.toString()可以把别的类型换成字符串。
（数值、布尔值、对象、字符串都可以 null、undefined不可以）

.toString(2/8/10/16) 括号内是进制。默认是10进制（数值转换过程中

在不知道要转换的值是不是 null 或 undefined 的情况下，还可以使用转型函数 String()，这个函数能够将任何类型的值转换为字符串。

OBJECT一脸懵逼。。。

自加自减的操作和C语言一样。
当应用于非数值数据类型的话，会先转换成数值再进行计算。



1.按位非（NOT）
    按位非操作符有一个波浪线（~）表示。返回的就是这个数值的反码。（相当于补码减一。
    例如 var num1=25;var num2=~num1; alert(num2) 输出的是-26。

2.按位与（AND）
    由一个&表示。有两个操作数。。。。没什么用不写了

3.按位或（OR）
    。。。

4.异或（XOR）。。

5.左移
    左移操作符是<<，比如5<<2就是变成了5*2^2
    左移不影响操作数的符号位。

！会先把操作数换成布尔值再进行取反。

!object和!NaN和!undefined和!空字符串都是true。

逻辑与操作就不一定返回布尔值；此时，它遵循下列规则：
? 如果第一个操作数是对象，则返回第二个操作数；
? 如果第二个操作数是对象，则只有在第一个操作数的求值结果为 true 的情况下才会返回该
对象；
? 如果两个操作数都是对象，则返回第二个操作数；
? 如果有一个操作数是 null，则返回 null；
? 如果有一个操作数是 NaN，则返回 NaN；
? 如果有一个操作数是 undefined，则返回 undefined。
第一个能决定结果的话就不会在对第二个操作数进行求值

不能在逻辑与和逻辑或操作中使用未定义的值。

0/0返回NaN

infinity去求模会返回NAN

求模时如果有一个操作数不是数值，则在后台调用 Number()将其转换为数值，再求模。

加法：+0加-0 结果是+0

在比较数值和字符串的时候，字符串会变转换成数值。

任何操作数与NAN进行关系比较结果都是false.

(==和!=)会把操作数转换成为相同类型。然后再比较相等性。

全等和不全等。===就是全等符号，表示除了两个操作数未经转换就相等的情况下返回true
！== 不全等符号。表示它在它在两个操作数未经转换就不相等的情况下返回 true。

条件操作符：
就是C语言里面的三目运算符。。。
boolean_expression?ture_value:false_value；

do while\while\for\switch等都可以用。按照C语言来

for-in语句

for-in循环应该用在非数组对象的遍历上，使用for-in进行循环也被称为“枚举”。因为它真正遍历的是对象“可枚举的属性”

for-in循环输出的属性名的顺序是不可预测的。

label:statement 这样创建一个标签。

break、continue+标签可以调到标签那。大多用于跳出循环嵌套

这样会输出Greeting was found.

arguments是函数中的参数。一个数组来的arguments[0]表示的是第一项参数。

改变arguments的某一项会改变它所对应的值，就像指针一样....但是二者不是同一空间。

如果定义了相同函数名的话，那么后定义的函数会覆盖先定义的函数。
